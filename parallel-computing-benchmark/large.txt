# JMH version: 1.36
# VM version: JDK 19.0.2, OpenJDK 64-Bit Server VM, 19.0.2+7-44
# VM invoker: C:\Users\Roman_Leniv\.jabba\jdk\system@19\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 30 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.leniv.parallel.computing.benchmark.FinderBenchmark.find
# Parameters: (input = LARGE, type = SEQUENTIAL)

# Run progress: 0,00% complete, ETA 00:50:00
# Fork: 1 of 5
Iteration   1: 17,023 s/op
                 ·stack: <delayed till summary>

Iteration   2: 13,858 s/op
                 ·stack: <delayed till summary>

Iteration   3: 14,066 s/op
                 ·stack: <delayed till summary>

Iteration   4: 13,886 s/op
                 ·stack: <delayed till summary>

Iteration   5: 13,650 s/op
                 ·stack: <delayed till summary>


# Run progress: 5,00% complete, ETA 01:04:41
# Fork: 2 of 5
Iteration   1: 14,254 s/op
                 ·stack: <delayed till summary>

Iteration   2: 14,260 s/op
                 ·stack: <delayed till summary>

Iteration   3: 14,459 s/op
                 ·stack: <delayed till summary>

Iteration   4: 14,294 s/op
                 ·stack: <delayed till summary>

Iteration   5: 14,472 s/op
                 ·stack: <delayed till summary>


# Run progress: 10,00% complete, ETA 01:03:29
# Fork: 3 of 5
Iteration   1: 14,216 s/op
                 ·stack: <delayed till summary>

Iteration   2: 14,320 s/op
                 ·stack: <delayed till summary>

Iteration   3: 14,394 s/op
                 ·stack: <delayed till summary>

Iteration   4: 14,270 s/op
                 ·stack: <delayed till summary>

Iteration   5: 14,461 s/op
                 ·stack: <delayed till summary>


# Run progress: 15,00% complete, ETA 01:00:38
# Fork: 4 of 5
Iteration   1: 16,341 s/op
                 ·stack: <delayed till summary>

Iteration   2: 14,321 s/op
                 ·stack: <delayed till summary>

Iteration   3: 14,417 s/op
                 ·stack: <delayed till summary>

Iteration   4: 14,407 s/op
                 ·stack: <delayed till summary>

Iteration   5: 14,345 s/op
                 ·stack: <delayed till summary>


# Run progress: 20,00% complete, ETA 00:56:44
# Fork: 5 of 5
Iteration   1: 14,286 s/op
                 ·stack: <delayed till summary>

Iteration   2: 13,762 s/op
                 ·stack: <delayed till summary>

Iteration   3: 13,737 s/op
                 ·stack: <delayed till summary>

Iteration   4: 13,701 s/op
                 ·stack: <delayed till summary>

Iteration   5: 13,772 s/op
                 ·stack: <delayed till summary>



Result "org.leniv.parallel.computing.benchmark.FinderBenchmark.find":
  14,359 ±(99.9%) 0,566 s/op [Average]
  (min, avg, max) = (13,650, 14,359, 17,023), stdev = 0,756
  CI (99.9%): [13,793, 14,925] (assumes normal distribution)

Secondary result "org.leniv.parallel.computing.benchmark.FinderBenchmark.find:·stack":
Stack profiler:

....[Thread state distributions]....................................................................
 66,7%         RUNNABLE
 33,3%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 33,3%  50,0% <stack is empty, everything is filtered?>
 29,5%  44,3% java.util.stream.Collectors.lambda$groupingBy$53:1143
  2,1%   3,1% java.util.HashMap.hash:338
  1,1%   1,6% java.util.HashMap.computeIfAbsent:1214
  0,4%   0,5% jdk.internal.util.random.RandomSupport$RandomIntsSpliterator.forEachRemaining:1019
  0,1%   0,2% java.util.AbstractList$RandomAccessSpliterator.forEachRemaining:721
  0,1%   0,1% java.util.HashMap.resize:713
  0,0%   0,0% java.lang.invoke.DirectMethodHandle.allocateInstance:501
  0,0%   0,0% java.util.HashMap.resize:741
  0,0%   0,0% java.util.HashMap.replaceAll:1444

....[Thread state: TIMED_WAITING]...................................................................
 33,3% 100,0% jdk.internal.misc.Unsafe.park:-2



# JMH version: 1.36
# VM version: JDK 19.0.2, OpenJDK 64-Bit Server VM, 19.0.2+7-44
# VM invoker: C:\Users\Roman_Leniv\.jabba\jdk\system@19\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 30 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.leniv.parallel.computing.benchmark.FinderBenchmark.find
# Parameters: (input = LARGE, type = SIMPLE_PARALLEL)

# Run progress: 25,00% complete, ETA 00:53:07
# Fork: 1 of 5
Iteration   1: 4,439 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,201 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,211 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,188 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,152 s/op
                 ·stack: <delayed till summary>


# Run progress: 30,00% complete, ETA 00:47:54
# Fork: 2 of 5
Iteration   1: 4,355 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,187 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,231 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,125 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,239 s/op
                 ·stack: <delayed till summary>


# Run progress: 35,00% complete, ETA 00:43:20
# Fork: 3 of 5
Iteration   1: 4,496 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,169 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,117 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,169 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,138 s/op
                 ·stack: <delayed till summary>


# Run progress: 40,00% complete, ETA 00:39:13
# Fork: 4 of 5
Iteration   1: 4,343 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,132 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,193 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,227 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,184 s/op
                 ·stack: <delayed till summary>


# Run progress: 45,00% complete, ETA 00:35:23
# Fork: 5 of 5
Iteration   1: 4,390 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,036 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,367 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,019 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,230 s/op
                 ·stack: <delayed till summary>



Result "org.leniv.parallel.computing.benchmark.FinderBenchmark.find":
  4,221 ±(99.9%) 0,088 s/op [Average]
  (min, avg, max) = (4,019, 4,221, 4,496), stdev = 0,118
  CI (99.9%): [4,133, 4,310] (assumes normal distribution)

Secondary result "org.leniv.parallel.computing.benchmark.FinderBenchmark.find:·stack":
Stack profiler:

....[Thread state distributions]....................................................................
 79,6%         RUNNABLE
 14,9%         WAITING
  5,4%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 61,5%  77,3% org.leniv.parallel.computing.element.finder.impl.problem.ComputeEachElementFrequencyProblem.solve:25
 11,3%  14,2% java.util.concurrent.ConcurrentHashMap.merge:2051
  5,4%   6,8% <stack is empty, everything is filtered?>
  0,5%   0,6% java.util.concurrent.ConcurrentHashMap.merge:2047
  0,1%   0,2% java.util.stream.AbstractPipeline.copyInto:509
  0,1%   0,2% jdk.internal.util.random.RandomSupport$RandomIntsSpliterator.forEachRemaining:1019
  0,1%   0,1% java.util.Arrays.copyOf:3512
  0,1%   0,1% java.util.concurrent.ConcurrentHashMap.addCount:2331
  0,0%   0,1% java.util.concurrent.ConcurrentHashMap$EntrySpliterator.forEachRemaining:3652
  0,0%   0,0% java.util.Arrays.copyOf:3481
  0,4%   0,5% <other>

....[Thread state: WAITING].........................................................................
 14,9% 100,0% jdk.internal.misc.Unsafe.park:-2

....[Thread state: TIMED_WAITING]...................................................................
  5,4% 100,0% jdk.internal.misc.Unsafe.park:-2



# JMH version: 1.36
# VM version: JDK 19.0.2, OpenJDK 64-Bit Server VM, 19.0.2+7-44
# VM invoker: C:\Users\Roman_Leniv\.jabba\jdk\system@19\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 30 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.leniv.parallel.computing.benchmark.FinderBenchmark.find
# Parameters: (input = LARGE, type = RECURSIVE_PARALLEL)

# Run progress: 50,00% complete, ETA 00:31:45
# Fork: 1 of 5
Iteration   1: 4,555 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,579 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,467 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,509 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,307 s/op
                 ·stack: <delayed till summary>


# Run progress: 55,00% complete, ETA 00:28:10
# Fork: 2 of 5
Iteration   1: 4,547 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,297 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,450 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,379 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,496 s/op
                 ·stack: <delayed till summary>


# Run progress: 60,00% complete, ETA 00:24:43
# Fork: 3 of 5
Iteration   1: 4,502 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,302 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,312 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,378 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,222 s/op
                 ·stack: <delayed till summary>


# Run progress: 65,00% complete, ETA 00:21:26
# Fork: 4 of 5
Iteration   1: 4,577 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,520 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,461 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,312 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,305 s/op
                 ·stack: <delayed till summary>


# Run progress: 70,00% complete, ETA 00:18:12
# Fork: 5 of 5
Iteration   1: 4,608 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,294 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,330 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,355 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,347 s/op
                 ·stack: <delayed till summary>



Result "org.leniv.parallel.computing.benchmark.FinderBenchmark.find":
  4,416 ±(99.9%) 0,085 s/op [Average]
  (min, avg, max) = (4,222, 4,416, 4,608), stdev = 0,114
  CI (99.9%): [4,331, 4,501] (assumes normal distribution)

Secondary result "org.leniv.parallel.computing.benchmark.FinderBenchmark.find:·stack":
Stack profiler:

....[Thread state distributions]....................................................................
 74,7%         RUNNABLE
 19,1%         WAITING
  6,2%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 57,1%  76,5% org.leniv.parallel.computing.element.finder.impl.problem.ComputeEachElementFrequencyProblem.solve:25
 11,1%  14,8% java.util.concurrent.ConcurrentHashMap.merge:2051
  5,6%   7,6% <stack is empty, everything is filtered?>
  0,1%   0,2% java.util.AbstractList$RandomAccessSpliterator.forEachRemaining:721
  0,1%   0,1% java.util.concurrent.ConcurrentHashMap.merge:2047
  0,1%   0,1% jdk.internal.util.random.RandomSupport$RandomIntsSpliterator.forEachRemaining:1019
  0,1%   0,1% java.util.concurrent.ConcurrentHashMap.addCount:2331
  0,1%   0,1% java.util.Arrays.copyOf:3512
  0,0%   0,1% org.leniv.parallel.computing.element.finder.impl.problem.ComputeEachElementFrequencyProblem.solve:26
  0,0%   0,0% java.util.concurrent.ConcurrentHashMap$EntrySpliterator.forEachRemaining:3652
  0,3%   0,4% <other>

....[Thread state: WAITING].........................................................................
 19,1% 100,0% jdk.internal.misc.Unsafe.park:-2

....[Thread state: TIMED_WAITING]...................................................................
  6,2% 100,0% jdk.internal.misc.Unsafe.park:-2



# JMH version: 1.36
# VM version: JDK 19.0.2, OpenJDK 64-Bit Server VM, 19.0.2+7-44
# VM invoker: C:\Users\Roman_Leniv\.jabba\jdk\system@19\bin\java.exe
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: <none>
# Measurement: 5 iterations, 30 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.leniv.parallel.computing.benchmark.FinderBenchmark.find
# Parameters: (input = LARGE, type = STREAM_PARALLEL)

# Run progress: 75,00% complete, ETA 00:15:03
# Fork: 1 of 5
Iteration   1: 4,216 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,369 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,344 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,448 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,412 s/op
                 ·stack: <delayed till summary>


# Run progress: 80,00% complete, ETA 00:11:57
# Fork: 2 of 5
Iteration   1: 4,506 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,423 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,663 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,580 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,544 s/op
                 ·stack: <delayed till summary>


# Run progress: 85,00% complete, ETA 00:08:55
# Fork: 3 of 5
Iteration   1: 4,451 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,468 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,521 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,485 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,591 s/op
                 ·stack: <delayed till summary>


# Run progress: 90,00% complete, ETA 00:05:55
# Fork: 4 of 5
Iteration   1: 4,438 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,473 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,579 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,671 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,509 s/op
                 ·stack: <delayed till summary>


# Run progress: 95,00% complete, ETA 00:02:56
# Fork: 5 of 5
Iteration   1: 4,388 s/op
                 ·stack: <delayed till summary>

Iteration   2: 4,403 s/op
                 ·stack: <delayed till summary>

Iteration   3: 4,517 s/op
                 ·stack: <delayed till summary>

Iteration   4: 4,516 s/op
                 ·stack: <delayed till summary>

Iteration   5: 4,628 s/op
                 ·stack: <delayed till summary>



Result "org.leniv.parallel.computing.benchmark.FinderBenchmark.find":
  4,486 ±(99.9%) 0,078 s/op [Average]
  (min, avg, max) = (4,216, 4,486, 4,671), stdev = 0,104
  CI (99.9%): [4,408, 4,564] (assumes normal distribution)

Secondary result "org.leniv.parallel.computing.benchmark.FinderBenchmark.find:·stack":
Stack profiler:

....[Thread state distributions]....................................................................
 85,4%         RUNNABLE
  8,8%         WAITING
  5,8%         TIMED_WAITING

....[Thread state: RUNNABLE]........................................................................
 62,1%  72,8% java.util.stream.Collectors.lambda$groupingByConcurrent$59:1313
 16,5%  19,4% java.util.concurrent.ConcurrentHashMap.computeIfAbsent:1730
  5,7%   6,6% <stack is empty, everything is filtered?>
  0,1%   0,1% jdk.internal.util.random.RandomSupport$RandomIntsSpliterator.forEachRemaining:1019
  0,1%   0,1% java.util.concurrent.ConcurrentHashMap.addCount:2331
  0,1%   0,1% java.util.concurrent.ConcurrentHashMap$EntrySpliterator.forEachRemaining:3652
  0,1%   0,1% java.util.concurrent.ConcurrentHashMap$Traverser.advance:3383
  0,1%   0,1% java.util.concurrent.ConcurrentHashMap.replaceAll:1619
  0,1%   0,1% java.util.concurrent.ConcurrentHashMap.computeIfAbsent:1726
  0,1%   0,1% java.lang.invoke.DirectMethodHandle.allocateInstance:501
  0,3%   0,4% <other>

....[Thread state: WAITING].........................................................................
  8,8% 100,0% jdk.internal.misc.Unsafe.park:-2

....[Thread state: TIMED_WAITING]...................................................................
  5,8% 100,0% jdk.internal.misc.Unsafe.park:-2



# Run complete. Total time: 00:58:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                    (input)              (type)  Mode  Cnt   Score   Error  Units
FinderBenchmark.find           LARGE          SEQUENTIAL  avgt   25  14,359 ± 0,566   s/op
FinderBenchmark.find:·stack    LARGE          SEQUENTIAL  avgt          NaN            ---
FinderBenchmark.find           LARGE     SIMPLE_PARALLEL  avgt   25   4,221 ± 0,088   s/op
FinderBenchmark.find:·stack    LARGE     SIMPLE_PARALLEL  avgt          NaN            ---
FinderBenchmark.find           LARGE  RECURSIVE_PARALLEL  avgt   25   4,416 ± 0,085   s/op
FinderBenchmark.find:·stack    LARGE  RECURSIVE_PARALLEL  avgt          NaN            ---
FinderBenchmark.find           LARGE     STREAM_PARALLEL  avgt   25   4,486 ± 0,078   s/op
FinderBenchmark.find:·stack    LARGE     STREAM_PARALLEL  avgt          NaN            ---
